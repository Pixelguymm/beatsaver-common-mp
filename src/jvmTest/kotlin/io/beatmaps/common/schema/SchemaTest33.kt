package io.beatmaps.common.schema

import io.beatmaps.common.beatsaber.CorrectType
import io.beatmaps.common.beatsaber.CutDirection
import io.beatmaps.common.beatsaber.NodeNotPresent
import io.beatmaps.common.beatsaber.NodePresent
import io.beatmaps.common.schema.SchemaCommon.validateFolder
import io.beatmaps.common.schema.SchemaCommon.violation
import org.junit.Test
import org.valiktor.constraints.Between
import org.valiktor.constraints.In
import org.valiktor.constraints.Matches
import org.valiktor.constraints.NotNull
import kotlin.test.assertContentEquals
import kotlin.test.assertNotNull
import kotlin.test.assertNull

class SchemaTest33 {
    @Test
    fun schemaAs3_3() {
        val ex = validateFolder("3_2/as3_3")
        assertNotNull(ex)

        assertContentEquals(
            listOf<Any>(
                violation<NodePresent>("vfxEventBoxGroups"),
                violation<NodePresent>("_fxEventsCollection")
            ),
            ex.constraintViolations
        )
    }

    @Test
    fun bullet() {
        val ex = validateFolder("3_3/bullet")
        assertNull(ex)
    }

    @Test
    fun badtypes() {
        val ex = validateFolder("3_3/badtypes")
        assertNotNull(ex)

        assertContentEquals(
            listOf<Any>(
                violation<CorrectType>("version"),
                violation<CorrectType>("bpmEvents"),
                violation<CorrectType>("rotationEvents"),
                violation<CorrectType>("colorNotes"),
                violation<CorrectType>("bombNotes"),
                violation<CorrectType>("obstacles"),
                violation<CorrectType>("sliders"),
                violation<CorrectType>("burstSliders"),
                violation<CorrectType>("waypoints"),
                violation<CorrectType>("basicBeatmapEvents"),
                violation<CorrectType>("colorBoostBeatmapEvents"),
                violation<CorrectType>("lightColorEventBoxGroups"),
                violation<CorrectType>("lightRotationEventBoxGroups"),
                violation<CorrectType>("lightTranslationEventBoxGroups"),
                violation<CorrectType>("vfxEventBoxGroups"),
                violation<CorrectType>("_fxEventsCollection"),
                violation<CorrectType>("basicEventTypesWithKeywords"),
                violation<CorrectType>("useNormalEventsAsCompatibleEvents")
            ),
            ex.constraintViolations
        )
    }

    @Test
    fun basic() {
        val ex = validateFolder("3_3/basic")
        assertNull(ex)
    }

    @Test
    fun schema() {
        val ex = validateFolder("3_3/default")
        assertNull(ex)
    }

    @Test
    fun missing() {
        val ex = validateFolder("3_3/missing")
        assertNotNull(ex)

        assertContentEquals(
            listOf<Any>(
                violation<NodePresent>("bpmEvents"),
                violation<NodePresent>("rotationEvents"),
                violation<NodePresent>("colorNotes"),
                violation<NodePresent>("bombNotes"),
                violation<NodePresent>("obstacles"),
                violation<NodePresent>("sliders"),
                violation<NodePresent>("burstSliders"),
                violation<NodePresent>("waypoints"),
                violation<NodePresent>("basicBeatmapEvents"),
                violation<NodePresent>("colorBoostBeatmapEvents"),
                violation<NodePresent>("lightColorEventBoxGroups"),
                violation<NodePresent>("lightRotationEventBoxGroups"),
                violation<NodePresent>("lightTranslationEventBoxGroups"),
                violation<NodePresent>("vfxEventBoxGroups"),
                violation<NodePresent>("_fxEventsCollection"),
                violation<NodePresent>("basicEventTypesWithKeywords")
            ),
            ex.constraintViolations
        )
    }

    @Test
    fun schemaAs3_2() {
        val ex = validateFolder("3_3/as3_2")
        assertNotNull(ex)

        assertContentEquals(
            listOf<Any>(
                violation<NodePresent>("bpmEvents[0].beat"),

                violation<NodePresent>("colorNotes[0]._time"),
                violation<NodePresent>("colorNotes[0].y"),
                violation<NodePresent>("colorNotes[0].angleOffset"),
                violation<NodePresent>("colorNotes[1].color"),
                violation<NodePresent>("colorNotes[1].y"),
                violation<NodePresent>("colorNotes[1].angleOffset"),
                violation<NodePresent>("colorNotes[2].y"),
                violation<NodePresent>("colorNotes[2].angleOffset"),
                violation<NodePresent>("colorNotes[4].color"),
                violation<NodePresent>("colorNotes[4].x"),
                violation<NodePresent>("colorNotes[4].y"),
                violation<NodePresent>("colorNotes[4].angleOffset"),
                violation<NodePresent>("colorNotes[5].color"),
                violation<NodePresent>("colorNotes[5].direction"),
                violation<NodePresent>("colorNotes[5].x"),
                violation<NodePresent>("colorNotes[5].y"),
                violation<NodePresent>("colorNotes[5].angleOffset"),
                violation<NodePresent>("colorNotes[6].angleOffset"),

                violation<NodePresent>("bombNotes[0]._time"),
                violation<NodePresent>("bombNotes[0].x"),
                violation<NodePresent>("bombNotes[0].y"),
                violation<NodePresent>("bombNotes[1].x"),
                violation<NodePresent>("bombNotes[1].y"),

                violation<NodePresent>("obstacles[0].x"),
                violation<NodePresent>("obstacles[0].y"),
                violation<NodePresent>("obstacles[1].y"),

                violation<NodePresent>("sliders[0].color"),
                violation<NodePresent>("sliders[0].x"),
                violation<NodePresent>("sliders[0].y"),
                violation<NodePresent>("sliders[0].tailX"),
                violation<NodePresent>("sliders[0].tailY"),
                violation<NodePresent>("sliders[0].tailCutDirection"),
                violation<NodePresent>("sliders[0].sliderMidAnchorMode"),

                violation<NodePresent>("burstSliders[0].tailX"),
                violation<NodePresent>("burstSliders[0].tailY"),

                violation<NodePresent>("basicBeatmapEvents[0]._time"),
                violation<NodePresent>("basicBeatmapEvents[1]._time"),
                violation<NodePresent>("basicBeatmapEvents[1].value"),
                violation<NodePresent>("basicBeatmapEvents[3].value"),
                violation<NodePresent>("basicBeatmapEvents[6].value"),
                violation<NodePresent>("basicBeatmapEvents[9].value"),
                violation<NodePresent>("basicBeatmapEvents[9].floatValue"),
                violation<NodePresent>("basicBeatmapEvents[10].value"),
                violation<NodePresent>("basicBeatmapEvents[10].floatValue"),
                violation<NodePresent>("basicBeatmapEvents[11].floatValue"),
                violation<NodePresent>("basicBeatmapEvents[12].floatValue"),
                violation<NodePresent>("basicBeatmapEvents[13].floatValue"),

                violation<NodePresent>("colorBoostBeatmapEvents[0].beat"),
                violation<NodePresent>("colorBoostBeatmapEvents[0].boost"),
                violation<NodePresent>("colorBoostBeatmapEvents[2].boost"),
                violation<NodePresent>("colorBoostBeatmapEvents[4].boost"),

                violation<NodePresent>("lightColorEventBoxGroups[0].beat"),
                violation<NodePresent>("lightColorEventBoxGroups[0].eventBoxes[0].indexFilter.param0"),
                violation<NodePresent>("lightColorEventBoxGroups[0].eventBoxes[0].indexFilter.param1"),
                violation<NodePresent>("lightColorEventBoxGroups[0].eventBoxes[0].indexFilter.reversed"),
                violation<NodePresent>("lightColorEventBoxGroups[0].eventBoxes[0].indexFilter.chunks"),
                violation<NodePresent>("lightColorEventBoxGroups[0].eventBoxes[0].indexFilter.randomType"),
                violation<NodePresent>("lightColorEventBoxGroups[0].eventBoxes[0].indexFilter.seed"),
                violation<NodePresent>("lightColorEventBoxGroups[0].eventBoxes[0].indexFilter.limit"),
                violation<NodePresent>("lightColorEventBoxGroups[0].eventBoxes[0].indexFilter.alsoAffectsType"),
                violation<NodePresent>("lightColorEventBoxGroups[0].eventBoxes[0].beatDistributionParam"),
                violation<NodePresent>("lightColorEventBoxGroups[0].eventBoxes[0].brightnessDistributionParam"),
                violation<NodePresent>("lightColorEventBoxGroups[0].eventBoxes[0].brightnessDistributionShouldAffectFirstBaseEvent"),
                violation<NodePresent>("lightColorEventBoxGroups[0].eventBoxes[0].lightColorBaseDataList[0].beat"),
                violation<NodePresent>("lightColorEventBoxGroups[0].eventBoxes[0].lightColorBaseDataList[0].transitionType"),
                violation<NodePresent>("lightColorEventBoxGroups[0].eventBoxes[0].lightColorBaseDataList[0].strobeFrequency"),
                violation<NodePresent>("lightColorEventBoxGroups[0].eventBoxes[1].indexFilter.param1"),
                violation<NodePresent>("lightColorEventBoxGroups[0].eventBoxes[1].indexFilter.reversed"),
                violation<NodePresent>("lightColorEventBoxGroups[0].eventBoxes[1].indexFilter.chunks"),
                violation<NodePresent>("lightColorEventBoxGroups[0].eventBoxes[1].indexFilter.randomType"),
                violation<NodePresent>("lightColorEventBoxGroups[0].eventBoxes[1].indexFilter.seed"),
                violation<NodePresent>("lightColorEventBoxGroups[0].eventBoxes[1].indexFilter.limit"),
                violation<NodePresent>("lightColorEventBoxGroups[0].eventBoxes[1].indexFilter.alsoAffectsType"),
                violation<NodePresent>("lightColorEventBoxGroups[0].eventBoxes[1].beatDistributionParam"),
                violation<NodePresent>("lightColorEventBoxGroups[0].eventBoxes[1].brightnessDistributionParam"),
                violation<NodePresent>("lightColorEventBoxGroups[0].eventBoxes[1].brightnessDistributionShouldAffectFirstBaseEvent"),
                violation<NodePresent>("lightColorEventBoxGroups[0].eventBoxes[1].lightColorBaseDataList[0].transitionType"),
                violation<NodePresent>("lightColorEventBoxGroups[0].eventBoxes[1].lightColorBaseDataList[0].strobeFrequency"),
                violation<NodePresent>("lightColorEventBoxGroups[0].eventBoxes[1].lightColorBaseDataList[1].transitionType"),
                violation<NodePresent>("lightColorEventBoxGroups[0].eventBoxes[1].lightColorBaseDataList[1].brightness"),
                violation<NodePresent>("lightColorEventBoxGroups[0].eventBoxes[1].lightColorBaseDataList[1].strobeFrequency"),
                violation<NodePresent>("lightColorEventBoxGroups[0].eventBoxes[2].indexFilter.param1"),
                violation<NodePresent>("lightColorEventBoxGroups[0].eventBoxes[2].indexFilter.reversed"),
                violation<NodePresent>("lightColorEventBoxGroups[0].eventBoxes[2].indexFilter.chunks"),
                violation<NodePresent>("lightColorEventBoxGroups[0].eventBoxes[2].indexFilter.randomType"),
                violation<NodePresent>("lightColorEventBoxGroups[0].eventBoxes[2].indexFilter.seed"),
                violation<NodePresent>("lightColorEventBoxGroups[0].eventBoxes[2].indexFilter.limit"),
                violation<NodePresent>("lightColorEventBoxGroups[0].eventBoxes[2].indexFilter.alsoAffectsType"),
                violation<NodePresent>("lightColorEventBoxGroups[0].eventBoxes[2].beatDistributionParam"),
                violation<NodePresent>("lightColorEventBoxGroups[0].eventBoxes[2].brightnessDistributionParam"),
                violation<NodePresent>("lightColorEventBoxGroups[0].eventBoxes[2].brightnessDistributionShouldAffectFirstBaseEvent"),
                violation<NodePresent>("lightColorEventBoxGroups[0].eventBoxes[2].lightColorBaseDataList[0].transitionType"),
                violation<NodePresent>("lightColorEventBoxGroups[0].eventBoxes[2].lightColorBaseDataList[0].strobeFrequency"),
                violation<NodePresent>("lightColorEventBoxGroups[0].eventBoxes[2].lightColorBaseDataList[1].strobeFrequency"),
                violation<NodePresent>("lightColorEventBoxGroups[0].eventBoxes[3].indexFilter.param1"),
                violation<NodePresent>("lightColorEventBoxGroups[0].eventBoxes[3].indexFilter.reversed"),
                violation<NodePresent>("lightColorEventBoxGroups[0].eventBoxes[3].indexFilter.chunks"),
                violation<NodePresent>("lightColorEventBoxGroups[0].eventBoxes[3].indexFilter.randomType"),
                violation<NodePresent>("lightColorEventBoxGroups[0].eventBoxes[3].indexFilter.seed"),
                violation<NodePresent>("lightColorEventBoxGroups[0].eventBoxes[3].indexFilter.limit"),
                violation<NodePresent>("lightColorEventBoxGroups[0].eventBoxes[3].indexFilter.alsoAffectsType"),
                violation<NodePresent>("lightColorEventBoxGroups[0].eventBoxes[3].beatDistributionParam"),
                violation<NodePresent>("lightColorEventBoxGroups[0].eventBoxes[3].brightnessDistributionParam"),
                violation<NodePresent>("lightColorEventBoxGroups[0].eventBoxes[3].brightnessDistributionShouldAffectFirstBaseEvent"),
                violation<NodePresent>("lightColorEventBoxGroups[0].eventBoxes[3].lightColorBaseDataList[0].transitionType"),
                violation<NodePresent>("lightColorEventBoxGroups[0].eventBoxes[3].lightColorBaseDataList[0].strobeFrequency"),

                violation<NodePresent>("lightRotationEventBoxGroups[0].eventBoxes[0].indexFilter.param1"),
                violation<NodePresent>("lightRotationEventBoxGroups[0].eventBoxes[0].indexFilter.reversed"),
                violation<NodePresent>("lightRotationEventBoxGroups[0].eventBoxes[0].indexFilter.chunks"),
                violation<NodePresent>("lightRotationEventBoxGroups[0].eventBoxes[0].indexFilter.randomType"),
                violation<NodePresent>("lightRotationEventBoxGroups[0].eventBoxes[0].indexFilter.seed"),
                violation<NodePresent>("lightRotationEventBoxGroups[0].eventBoxes[0].indexFilter.limit"),
                violation<NodePresent>("lightRotationEventBoxGroups[0].eventBoxes[0].indexFilter.alsoAffectsType"),
                violation<NodePresent>("lightRotationEventBoxGroups[0].eventBoxes[0].beatDistributionParam"),
                violation<NodePresent>("lightRotationEventBoxGroups[0].eventBoxes[0].rotationDistributionParam"),
                violation<NodePresent>("lightRotationEventBoxGroups[0].eventBoxes[0].flipRotation"),
                violation<NodePresent>("lightRotationEventBoxGroups[0].eventBoxes[0].brightnessDistributionShouldAffectFirstBaseEvent"),
                violation<NodePresent>("lightRotationEventBoxGroups[0].eventBoxes[0].lightRotationBaseDataList[0].beat"),
                violation<NodePresent>("lightRotationEventBoxGroups[0].eventBoxes[0].lightRotationBaseDataList[0].usePreviousEventRotationValue"),
                violation<NodePresent>("lightRotationEventBoxGroups[0].eventBoxes[0].lightRotationBaseDataList[0].loopsCount"),
                violation<NodePresent>("lightRotationEventBoxGroups[0].eventBoxes[0].lightRotationBaseDataList[0].rotationDirection"),

                violation<NodePresent>("lightTranslationEventBoxGroups[0].eventBoxes[0].indexFilter.param1"),
                violation<NodePresent>("lightTranslationEventBoxGroups[0].eventBoxes[0].indexFilter.reversed"),
                violation<NodePresent>("lightTranslationEventBoxGroups[0].eventBoxes[0].indexFilter.chunks"),
                violation<NodePresent>("lightTranslationEventBoxGroups[0].eventBoxes[0].indexFilter.randomType"),
                violation<NodePresent>("lightTranslationEventBoxGroups[0].eventBoxes[0].indexFilter.seed"),
                violation<NodePresent>("lightTranslationEventBoxGroups[0].eventBoxes[0].indexFilter.limit"),
                violation<NodePresent>("lightTranslationEventBoxGroups[0].eventBoxes[0].indexFilter.alsoAffectsType"),
                violation<NodePresent>("lightTranslationEventBoxGroups[0].eventBoxes[0].gapDistributionParam"),
                violation<NodePresent>("lightTranslationEventBoxGroups[0].eventBoxes[0].flipTranslation"),
                violation<NodePresent>("lightTranslationEventBoxGroups[0].eventBoxes[0].gapDistributionShouldAffectFirstBaseEvent"),
                violation<NodePresent>("lightTranslationEventBoxGroups[0].eventBoxes[0].gapDistributionEaseType"),
                violation<NodePresent>("lightTranslationEventBoxGroups[0].eventBoxes[0].lightTranslationBaseDataList[0].beat"),
                violation<NodePresent>("lightTranslationEventBoxGroups[0].eventBoxes[0].lightTranslationBaseDataList[0].usePreviousEventTranslationValue"),
                violation<NodePresent>("lightTranslationEventBoxGroups[0].eventBoxes[0].lightTranslationBaseDataList[0].translation"),

                violation<NodeNotPresent>("vfxEventBoxGroups"),
                violation<NodeNotPresent>("_fxEventsCollection"),

                violation<NodePresent>("useNormalEventsAsCompatibleEvents")
            ),
            ex.constraintViolations
        )
    }

    @Test
    fun `null`() {
        val ex = validateFolder("3_3/null")
        assertNotNull(ex)

        assertContentEquals(
            listOf<Any>(
                violation<NotNull>("version"),
                violation<NotNull>("bpmEvents"),
                violation<NotNull>("rotationEvents"),
                violation<NotNull>("colorNotes"),
                violation<NotNull>("bombNotes"),
                violation<NotNull>("obstacles"),
                violation<NotNull>("sliders"),
                violation<NotNull>("burstSliders"),
                violation<NotNull>("waypoints"),
                violation<NotNull>("basicBeatmapEvents"),
                violation<NotNull>("colorBoostBeatmapEvents"),
                violation<NotNull>("lightColorEventBoxGroups"),
                violation<NotNull>("lightRotationEventBoxGroups"),
                violation<NotNull>("lightTranslationEventBoxGroups"),
                violation<NotNull>("vfxEventBoxGroups"),
                violation<NotNull>("_fxEventsCollection"),
                violation<NotNull>("basicEventTypesWithKeywords"),
                violation<NotNull>("useNormalEventsAsCompatibleEvents")
            ),
            ex.constraintViolations
        )
    }

    @Test
    fun error() {
        val ex = validateFolder("3_3/error")
        assertNotNull(ex)

        assertContentEquals(
            listOf<Any>(
                violation<Matches>("version"),

                violation<CorrectType>("bpmEvents[0].bpm"),
                violation<CorrectType>("bpmEvents[0].beat"),
                violation<NotNull>("bpmEvents[1].bpm"),
                violation<NotNull>("bpmEvents[1].beat"),
                violation<CorrectType>("bpmEvents[2]"),
                violation<NotNull>("bpmEvents[3]"),

                violation<In<Int>>("rotationEvents[0].executionTime"),
                violation<CorrectType>("rotationEvents[1].executionTime"),
                violation<CorrectType>("rotationEvents[1]._time"),
                violation<CorrectType>("rotationEvents[1].rotation"),
                violation<In<Int>>("rotationEvents[2].executionTime"),
                violation<NotNull>("rotationEvents[2]._time"),
                violation<NotNull>("rotationEvents[2].rotation"),
                violation<CorrectType>("rotationEvents[3]"),
                violation<NotNull>("rotationEvents[4]"),

                violation<In<Int>>("colorNotes[0].color"),
                violation<CutDirection>("colorNotes[0].direction"),
                violation<Between<Float>>("colorNotes[0]._time"),
                violation<CorrectType>("colorNotes[1].color"),
                violation<CorrectType>("colorNotes[1].direction"),
                violation<CorrectType>("colorNotes[1]._time"),
                violation<CorrectType>("colorNotes[1].x"),
                violation<CorrectType>("colorNotes[1].y"),
                violation<CorrectType>("colorNotes[1].angleOffset"),
                violation<In<Int>>("colorNotes[2].color"),
                violation<NotNull>("colorNotes[2].direction"),
                violation<NotNull>("colorNotes[2]._time"),
                violation<NotNull>("colorNotes[2].x"),
                violation<NotNull>("colorNotes[2].y"),
                violation<NotNull>("colorNotes[2].angleOffset"),
                violation<CorrectType>("colorNotes[3]"),
                violation<NotNull>("colorNotes[4]"),

                violation<CorrectType>("bombNotes[0]._time"),
                violation<CorrectType>("bombNotes[0].x"),
                violation<CorrectType>("bombNotes[0].y"),
                violation<NotNull>("bombNotes[1]._time"),
                violation<NotNull>("bombNotes[1].x"),
                violation<NotNull>("bombNotes[1].y"),
                violation<CorrectType>("bombNotes[2]"),
                violation<NotNull>("bombNotes[3]"),

                violation<CorrectType>("obstacles[0].duration"),
                violation<CorrectType>("obstacles[0].beat"),
                violation<CorrectType>("obstacles[0].x"),
                violation<CorrectType>("obstacles[0].y"),
                violation<CorrectType>("obstacles[0].width"),
                violation<CorrectType>("obstacles[0].height"),
                violation<NotNull>("obstacles[1].duration"),
                violation<NotNull>("obstacles[1].beat"),
                violation<NotNull>("obstacles[1].x"),
                violation<NotNull>("obstacles[1].y"),
                violation<NotNull>("obstacles[1].width"),
                violation<NotNull>("obstacles[1].height"),
                violation<CorrectType>("obstacles[2]"),
                violation<NotNull>("obstacles[3]"),

                violation<In<Int>>("sliders[0].color"),
                violation<CorrectType>("sliders[1]._time"),
                violation<CorrectType>("sliders[1].color"),
                violation<CorrectType>("sliders[1].x"),
                violation<CorrectType>("sliders[1].y"),
                violation<CorrectType>("sliders[1].direction"),
                violation<CorrectType>("sliders[1].tailBeat"),
                violation<CorrectType>("sliders[1].tailX"),
                violation<CorrectType>("sliders[1].tailY"),
                violation<CorrectType>("sliders[1].headControlPointLengthMultiplier"),
                violation<CorrectType>("sliders[1].tailControlPointLengthMultiplier"),
                violation<CorrectType>("sliders[1].tailCutDirection"),
                violation<CorrectType>("sliders[1].sliderMidAnchorMode"),
                violation<NotNull>("sliders[2]._time"),
                violation<In<Int>>("sliders[2].color"),
                violation<NotNull>("sliders[2].x"),
                violation<NotNull>("sliders[2].y"),
                violation<NotNull>("sliders[2].direction"),
                violation<NotNull>("sliders[2].tailBeat"),
                violation<NotNull>("sliders[2].tailX"),
                violation<NotNull>("sliders[2].tailY"),
                violation<NotNull>("sliders[2].headControlPointLengthMultiplier"),
                violation<NotNull>("sliders[2].tailControlPointLengthMultiplier"),
                violation<NotNull>("sliders[2].tailCutDirection"),
                violation<NotNull>("sliders[2].sliderMidAnchorMode"),
                violation<CorrectType>("sliders[3]"),
                violation<NotNull>("sliders[4]"),

                violation<Between<Float>>("burstSliders[0]._time"),
                violation<In<Int>>("burstSliders[0].color"),
                violation<Between<Float>>("burstSliders[0].tailBeat"),
                violation<CorrectType>("burstSliders[1]._time"),
                violation<CorrectType>("burstSliders[1].color"),
                violation<CorrectType>("burstSliders[1].x"),
                violation<CorrectType>("burstSliders[1].y"),
                violation<CorrectType>("burstSliders[1].direction"),
                violation<CorrectType>("burstSliders[1].tailBeat"),
                violation<CorrectType>("burstSliders[1].tailX"),
                violation<CorrectType>("burstSliders[1].tailY"),
                violation<CorrectType>("burstSliders[1].sliceCount"),
                violation<CorrectType>("burstSliders[1].squishAmount"),
                violation<NotNull>("burstSliders[2]._time"),
                violation<In<Int>>("burstSliders[2].color"),
                violation<NotNull>("burstSliders[2].x"),
                violation<NotNull>("burstSliders[2].y"),
                violation<NotNull>("burstSliders[2].direction"),
                violation<NotNull>("burstSliders[2].tailBeat"),
                violation<NotNull>("burstSliders[2].tailX"),
                violation<NotNull>("burstSliders[2].tailY"),
                violation<NotNull>("burstSliders[2].sliceCount"),
                violation<NotNull>("burstSliders[2].squishAmount"),
                violation<CorrectType>("burstSliders[3]"),
                violation<NotNull>("burstSliders[4]"),

                violation<CorrectType>("waypoints[0].beat"),
                violation<CorrectType>("waypoints[0].x"),
                violation<CorrectType>("waypoints[0].y"),
                violation<CorrectType>("waypoints[0].offsetDirection"),
                violation<NotNull>("waypoints[1].beat"),
                violation<NotNull>("waypoints[1].x"),
                violation<NotNull>("waypoints[1].y"),
                violation<NotNull>("waypoints[1].offsetDirection"),
                violation<CorrectType>("waypoints[2]"),
                violation<NotNull>("waypoints[3]"),

                violation<CorrectType>("basicBeatmapEvents[0]._time"),
                violation<CorrectType>("basicBeatmapEvents[0].eventType"),
                violation<CorrectType>("basicBeatmapEvents[0].value"),
                violation<CorrectType>("basicBeatmapEvents[0].floatValue"),
                violation<NotNull>("basicBeatmapEvents[1]._time"),
                violation<NotNull>("basicBeatmapEvents[1].eventType"),
                violation<NotNull>("basicBeatmapEvents[1].value"),
                violation<NotNull>("basicBeatmapEvents[1].floatValue"),
                violation<CorrectType>("basicBeatmapEvents[2]"),
                violation<NotNull>("basicBeatmapEvents[3]"),

                violation<CorrectType>("colorBoostBeatmapEvents[0].beat"),
                violation<CorrectType>("colorBoostBeatmapEvents[0].boost"),
                violation<NotNull>("colorBoostBeatmapEvents[1].beat"),
                violation<NotNull>("colorBoostBeatmapEvents[1].boost"),
                violation<CorrectType>("colorBoostBeatmapEvents[2]"),
                violation<NotNull>("colorBoostBeatmapEvents[3]"),

                violation<CorrectType>("lightColorEventBoxGroups[0].beat"),
                violation<CorrectType>("lightColorEventBoxGroups[0].groupId"),
                violation<CorrectType>("lightColorEventBoxGroups[0].eventBoxes[0].indexFilter.type"),
                violation<CorrectType>("lightColorEventBoxGroups[0].eventBoxes[0].indexFilter.param0"),
                violation<CorrectType>("lightColorEventBoxGroups[0].eventBoxes[0].indexFilter.param1"),
                violation<CorrectType>("lightColorEventBoxGroups[0].eventBoxes[0].indexFilter.reversed"),
                violation<CorrectType>("lightColorEventBoxGroups[0].eventBoxes[0].indexFilter.chunks"),
                violation<CorrectType>("lightColorEventBoxGroups[0].eventBoxes[0].indexFilter.randomType"),
                violation<CorrectType>("lightColorEventBoxGroups[0].eventBoxes[0].indexFilter.seed"),
                violation<CorrectType>("lightColorEventBoxGroups[0].eventBoxes[0].indexFilter.limit"),
                violation<CorrectType>("lightColorEventBoxGroups[0].eventBoxes[0].indexFilter.alsoAffectsType"),
                violation<CorrectType>("lightColorEventBoxGroups[0].eventBoxes[0].beatDistributionParam"),
                violation<CorrectType>("lightColorEventBoxGroups[0].eventBoxes[0].beatDistributionParamType"),
                violation<CorrectType>("lightColorEventBoxGroups[0].eventBoxes[0].brightnessDistributionParam"),
                violation<CorrectType>("lightColorEventBoxGroups[0].eventBoxes[0].brightnessDistributionParamType"),
                violation<CorrectType>("lightColorEventBoxGroups[0].eventBoxes[0].brightnessDistributionShouldAffectFirstBaseEvent"),
                violation<CorrectType>("lightColorEventBoxGroups[0].eventBoxes[0].lightColorBaseDataList[0].beat"),
                violation<CorrectType>("lightColorEventBoxGroups[0].eventBoxes[0].lightColorBaseDataList[0].transitionType"),
                violation<CorrectType>("lightColorEventBoxGroups[0].eventBoxes[0].lightColorBaseDataList[0].colorType"),
                violation<CorrectType>("lightColorEventBoxGroups[0].eventBoxes[0].lightColorBaseDataList[0].brightness"),
                violation<CorrectType>("lightColorEventBoxGroups[0].eventBoxes[0].lightColorBaseDataList[0].strobeFrequency"),
                violation<CorrectType>("lightColorEventBoxGroups[0].eventBoxes[0].lightColorBaseDataList[2]"),
                violation<NotNull>("lightColorEventBoxGroups[0].eventBoxes[0].lightColorBaseDataList[3]"),
                violation<CorrectType>("lightColorEventBoxGroups[0].eventBoxes[1].indexFilter"),
                violation<CorrectType>("lightColorEventBoxGroups[0].eventBoxes[1].lightColorBaseDataList"),
                violation<NodePresent>("lightColorEventBoxGroups[0].eventBoxes[2].indexFilter"),
                violation<CorrectType>("lightColorEventBoxGroups[0].eventBoxes[3]"),
                violation<NotNull>("lightColorEventBoxGroups[0].eventBoxes[4]"),
                violation<CorrectType>("lightColorEventBoxGroups[1].eventBoxes"),
                violation<NotNull>("lightColorEventBoxGroups[2].beat"),
                violation<NotNull>("lightColorEventBoxGroups[2].groupId"),
                violation<NotNull>("lightColorEventBoxGroups[2].eventBoxes[0].indexFilter.type"),
                violation<NotNull>("lightColorEventBoxGroups[2].eventBoxes[0].indexFilter.param0"),
                violation<NotNull>("lightColorEventBoxGroups[2].eventBoxes[0].indexFilter.param1"),
                violation<NotNull>("lightColorEventBoxGroups[2].eventBoxes[0].indexFilter.reversed"),
                violation<NotNull>("lightColorEventBoxGroups[2].eventBoxes[0].indexFilter.chunks"),
                violation<NotNull>("lightColorEventBoxGroups[2].eventBoxes[0].indexFilter.randomType"),
                violation<NotNull>("lightColorEventBoxGroups[2].eventBoxes[0].indexFilter.seed"),
                violation<NotNull>("lightColorEventBoxGroups[2].eventBoxes[0].indexFilter.limit"),
                violation<NotNull>("lightColorEventBoxGroups[2].eventBoxes[0].indexFilter.alsoAffectsType"),
                violation<NotNull>("lightColorEventBoxGroups[2].eventBoxes[0].beatDistributionParam"),
                violation<In<Int>>("lightColorEventBoxGroups[2].eventBoxes[0].beatDistributionParamType"),
                violation<NotNull>("lightColorEventBoxGroups[2].eventBoxes[0].brightnessDistributionParam"),
                violation<In<Int>>("lightColorEventBoxGroups[2].eventBoxes[0].brightnessDistributionParamType"),
                violation<NotNull>("lightColorEventBoxGroups[2].eventBoxes[0].brightnessDistributionShouldAffectFirstBaseEvent"),
                violation<NotNull>("lightColorEventBoxGroups[2].eventBoxes[0].lightColorBaseDataList[0].beat"),
                violation<In<Int>>("lightColorEventBoxGroups[2].eventBoxes[0].lightColorBaseDataList[0].transitionType"),
                violation<In<Int>>("lightColorEventBoxGroups[2].eventBoxes[0].lightColorBaseDataList[0].colorType"),
                violation<NotNull>("lightColorEventBoxGroups[2].eventBoxes[0].lightColorBaseDataList[0].brightness"),
                violation<NotNull>("lightColorEventBoxGroups[2].eventBoxes[0].lightColorBaseDataList[0].strobeFrequency"),
                violation<NotNull>("lightColorEventBoxGroups[2].eventBoxes[1].indexFilter"),
                violation<NotNull>("lightColorEventBoxGroups[2].eventBoxes[1].lightColorBaseDataList"),
                violation<NotNull>("lightColorEventBoxGroups[3].eventBoxes"),
                violation<CorrectType>("lightColorEventBoxGroups[4]"),
                violation<NotNull>("lightColorEventBoxGroups[5]"),

                violation<CorrectType>("lightRotationEventBoxGroups[0].beat"),
                violation<CorrectType>("lightRotationEventBoxGroups[0].groupId"),
                violation<CorrectType>("lightRotationEventBoxGroups[0].eventBoxes[0].indexFilter.type"),
                violation<CorrectType>("lightRotationEventBoxGroups[0].eventBoxes[0].indexFilter.param0"),
                violation<CorrectType>("lightRotationEventBoxGroups[0].eventBoxes[0].indexFilter.param1"),
                violation<CorrectType>("lightRotationEventBoxGroups[0].eventBoxes[0].indexFilter.reversed"),
                violation<CorrectType>("lightRotationEventBoxGroups[0].eventBoxes[0].indexFilter.chunks"),
                violation<CorrectType>("lightRotationEventBoxGroups[0].eventBoxes[0].indexFilter.randomType"),
                violation<CorrectType>("lightRotationEventBoxGroups[0].eventBoxes[0].indexFilter.seed"),
                violation<CorrectType>("lightRotationEventBoxGroups[0].eventBoxes[0].indexFilter.limit"),
                violation<CorrectType>("lightRotationEventBoxGroups[0].eventBoxes[0].indexFilter.alsoAffectsType"),
                violation<CorrectType>("lightRotationEventBoxGroups[0].eventBoxes[0].beatDistributionParam"),
                violation<CorrectType>("lightRotationEventBoxGroups[0].eventBoxes[0].beatDistributionParamType"),
                violation<CorrectType>("lightRotationEventBoxGroups[0].eventBoxes[0].rotationDistributionParam"),
                violation<CorrectType>("lightRotationEventBoxGroups[0].eventBoxes[0].rotationDistributionParamType"),
                violation<CorrectType>("lightRotationEventBoxGroups[0].eventBoxes[0].axis"),
                violation<CorrectType>("lightRotationEventBoxGroups[0].eventBoxes[0].flipRotation"),
                violation<CorrectType>("lightRotationEventBoxGroups[0].eventBoxes[0].brightnessDistributionShouldAffectFirstBaseEvent"),
                violation<CorrectType>("lightRotationEventBoxGroups[0].eventBoxes[0].lightRotationBaseDataList[0].beat"),
                violation<CorrectType>("lightRotationEventBoxGroups[0].eventBoxes[0].lightRotationBaseDataList[0].usePreviousEventRotationValue"),
                violation<CorrectType>("lightRotationEventBoxGroups[0].eventBoxes[0].lightRotationBaseDataList[0].easeType"),
                violation<CorrectType>("lightRotationEventBoxGroups[0].eventBoxes[0].lightRotationBaseDataList[0].loopsCount"),
                violation<CorrectType>("lightRotationEventBoxGroups[0].eventBoxes[0].lightRotationBaseDataList[0].rotation"),
                violation<CorrectType>("lightRotationEventBoxGroups[0].eventBoxes[0].lightRotationBaseDataList[0].rotationDirection"),
                violation<CorrectType>("lightRotationEventBoxGroups[0].eventBoxes[0].lightRotationBaseDataList[2]"),
                violation<NotNull>("lightRotationEventBoxGroups[0].eventBoxes[0].lightRotationBaseDataList[3]"),
                violation<CorrectType>("lightRotationEventBoxGroups[0].eventBoxes[1].indexFilter"),
                violation<CorrectType>("lightRotationEventBoxGroups[0].eventBoxes[1].lightRotationBaseDataList"),
                violation<NodePresent>("lightRotationEventBoxGroups[0].eventBoxes[2].indexFilter"),
                violation<CorrectType>("lightRotationEventBoxGroups[0].eventBoxes[3]"),
                violation<NotNull>("lightRotationEventBoxGroups[0].eventBoxes[4]"),
                violation<CorrectType>("lightRotationEventBoxGroups[1].eventBoxes"),
                violation<NotNull>("lightRotationEventBoxGroups[2].beat"),
                violation<NotNull>("lightRotationEventBoxGroups[2].groupId"),
                violation<NotNull>("lightRotationEventBoxGroups[2].eventBoxes[0].indexFilter.type"),
                violation<NotNull>("lightRotationEventBoxGroups[2].eventBoxes[0].indexFilter.param0"),
                violation<NotNull>("lightRotationEventBoxGroups[2].eventBoxes[0].indexFilter.param1"),
                violation<NotNull>("lightRotationEventBoxGroups[2].eventBoxes[0].indexFilter.reversed"),
                violation<NotNull>("lightRotationEventBoxGroups[2].eventBoxes[0].indexFilter.chunks"),
                violation<NotNull>("lightRotationEventBoxGroups[2].eventBoxes[0].indexFilter.randomType"),
                violation<NotNull>("lightRotationEventBoxGroups[2].eventBoxes[0].indexFilter.seed"),
                violation<NotNull>("lightRotationEventBoxGroups[2].eventBoxes[0].indexFilter.limit"),
                violation<NotNull>("lightRotationEventBoxGroups[2].eventBoxes[0].indexFilter.alsoAffectsType"),
                violation<NotNull>("lightRotationEventBoxGroups[2].eventBoxes[0].beatDistributionParam"),
                violation<In<Int>>("lightRotationEventBoxGroups[2].eventBoxes[0].beatDistributionParamType"),
                violation<NotNull>("lightRotationEventBoxGroups[2].eventBoxes[0].rotationDistributionParam"),
                violation<In<Int>>("lightRotationEventBoxGroups[2].eventBoxes[0].rotationDistributionParamType"),
                violation<NotNull>("lightRotationEventBoxGroups[2].eventBoxes[0].axis"),
                violation<NotNull>("lightRotationEventBoxGroups[2].eventBoxes[0].flipRotation"),
                violation<NotNull>("lightRotationEventBoxGroups[2].eventBoxes[0].brightnessDistributionShouldAffectFirstBaseEvent"),
                violation<NotNull>("lightRotationEventBoxGroups[2].eventBoxes[0].lightRotationBaseDataList[0].beat"),
                violation<NotNull>("lightRotationEventBoxGroups[2].eventBoxes[0].lightRotationBaseDataList[0].usePreviousEventRotationValue"),
                violation<NotNull>("lightRotationEventBoxGroups[2].eventBoxes[0].lightRotationBaseDataList[0].easeType"),
                violation<NotNull>("lightRotationEventBoxGroups[2].eventBoxes[0].lightRotationBaseDataList[0].loopsCount"),
                violation<NotNull>("lightRotationEventBoxGroups[2].eventBoxes[0].lightRotationBaseDataList[0].rotation"),
                violation<NotNull>("lightRotationEventBoxGroups[2].eventBoxes[0].lightRotationBaseDataList[0].rotationDirection"),
                violation<NotNull>("lightRotationEventBoxGroups[2].eventBoxes[1].indexFilter"),
                violation<NotNull>("lightRotationEventBoxGroups[2].eventBoxes[1].lightRotationBaseDataList"),
                violation<NotNull>("lightRotationEventBoxGroups[3].eventBoxes"),
                violation<CorrectType>("lightRotationEventBoxGroups[4]"),
                violation<NotNull>("lightRotationEventBoxGroups[5]"),

                violation<CorrectType>("lightTranslationEventBoxGroups[0].beat"),
                violation<CorrectType>("lightTranslationEventBoxGroups[0].groupId"),
                violation<CorrectType>("lightTranslationEventBoxGroups[0].eventBoxes[0].indexFilter.type"),
                violation<CorrectType>("lightTranslationEventBoxGroups[0].eventBoxes[0].indexFilter.param0"),
                violation<CorrectType>("lightTranslationEventBoxGroups[0].eventBoxes[0].indexFilter.param1"),
                violation<CorrectType>("lightTranslationEventBoxGroups[0].eventBoxes[0].indexFilter.reversed"),
                violation<CorrectType>("lightTranslationEventBoxGroups[0].eventBoxes[0].indexFilter.chunks"),
                violation<CorrectType>("lightTranslationEventBoxGroups[0].eventBoxes[0].indexFilter.randomType"),
                violation<CorrectType>("lightTranslationEventBoxGroups[0].eventBoxes[0].indexFilter.seed"),
                violation<CorrectType>("lightTranslationEventBoxGroups[0].eventBoxes[0].indexFilter.limit"),
                violation<CorrectType>("lightTranslationEventBoxGroups[0].eventBoxes[0].indexFilter.alsoAffectsType"),
                violation<CorrectType>("lightTranslationEventBoxGroups[0].eventBoxes[0].gapDistributionParam"),
                violation<CorrectType>("lightTranslationEventBoxGroups[0].eventBoxes[0].gapDistributionParamType"),
                violation<CorrectType>("lightTranslationEventBoxGroups[0].eventBoxes[0].axis"),
                violation<CorrectType>("lightTranslationEventBoxGroups[0].eventBoxes[0].flipTranslation"),
                violation<CorrectType>("lightTranslationEventBoxGroups[0].eventBoxes[0].gapDistributionShouldAffectFirstBaseEvent"),
                violation<CorrectType>("lightTranslationEventBoxGroups[0].eventBoxes[0].gapDistributionEaseType"),
                violation<CorrectType>("lightTranslationEventBoxGroups[0].eventBoxes[0].lightTranslationBaseDataList[0].beat"),
                violation<CorrectType>("lightTranslationEventBoxGroups[0].eventBoxes[0].lightTranslationBaseDataList[0].usePreviousEventTranslationValue"),
                violation<CorrectType>("lightTranslationEventBoxGroups[0].eventBoxes[0].lightTranslationBaseDataList[0].easeType"),
                violation<CorrectType>("lightTranslationEventBoxGroups[0].eventBoxes[0].lightTranslationBaseDataList[0].translation"),
                violation<CorrectType>("lightTranslationEventBoxGroups[0].eventBoxes[0].lightTranslationBaseDataList[2]"),
                violation<NotNull>("lightTranslationEventBoxGroups[0].eventBoxes[0].lightTranslationBaseDataList[3]"),
                violation<CorrectType>("lightTranslationEventBoxGroups[0].eventBoxes[1].indexFilter"),
                violation<CorrectType>("lightTranslationEventBoxGroups[0].eventBoxes[1].lightTranslationBaseDataList"),
                violation<NodePresent>("lightTranslationEventBoxGroups[0].eventBoxes[2].indexFilter"),
                violation<CorrectType>("lightTranslationEventBoxGroups[0].eventBoxes[3]"),
                violation<NotNull>("lightTranslationEventBoxGroups[0].eventBoxes[4]"),
                violation<CorrectType>("lightTranslationEventBoxGroups[1].eventBoxes"),
                violation<NotNull>("lightTranslationEventBoxGroups[2].beat"),
                violation<NotNull>("lightTranslationEventBoxGroups[2].groupId"),
                violation<NotNull>("lightTranslationEventBoxGroups[2].eventBoxes[0].indexFilter.type"),
                violation<NotNull>("lightTranslationEventBoxGroups[2].eventBoxes[0].indexFilter.param0"),
                violation<NotNull>("lightTranslationEventBoxGroups[2].eventBoxes[0].indexFilter.param1"),
                violation<NotNull>("lightTranslationEventBoxGroups[2].eventBoxes[0].indexFilter.reversed"),
                violation<NotNull>("lightTranslationEventBoxGroups[2].eventBoxes[0].indexFilter.chunks"),
                violation<NotNull>("lightTranslationEventBoxGroups[2].eventBoxes[0].indexFilter.randomType"),
                violation<NotNull>("lightTranslationEventBoxGroups[2].eventBoxes[0].indexFilter.seed"),
                violation<NotNull>("lightTranslationEventBoxGroups[2].eventBoxes[0].indexFilter.limit"),
                violation<NotNull>("lightTranslationEventBoxGroups[2].eventBoxes[0].indexFilter.alsoAffectsType"),
                violation<NotNull>("lightTranslationEventBoxGroups[2].eventBoxes[0].gapDistributionParam"),
                violation<In<Int>>("lightTranslationEventBoxGroups[2].eventBoxes[0].gapDistributionParamType"),
                violation<NotNull>("lightTranslationEventBoxGroups[2].eventBoxes[0].axis"),
                violation<NotNull>("lightTranslationEventBoxGroups[2].eventBoxes[0].flipTranslation"),
                violation<NotNull>("lightTranslationEventBoxGroups[2].eventBoxes[0].gapDistributionShouldAffectFirstBaseEvent"),
                violation<NotNull>("lightTranslationEventBoxGroups[2].eventBoxes[0].gapDistributionEaseType"),
                violation<NotNull>("lightTranslationEventBoxGroups[2].eventBoxes[0].lightTranslationBaseDataList[0].beat"),
                violation<NotNull>("lightTranslationEventBoxGroups[2].eventBoxes[0].lightTranslationBaseDataList[0].usePreviousEventTranslationValue"),
                violation<NotNull>("lightTranslationEventBoxGroups[2].eventBoxes[0].lightTranslationBaseDataList[0].easeType"),
                violation<NotNull>("lightTranslationEventBoxGroups[2].eventBoxes[0].lightTranslationBaseDataList[0].translation"),
                violation<NotNull>("lightTranslationEventBoxGroups[2].eventBoxes[1].indexFilter"),
                violation<NotNull>("lightTranslationEventBoxGroups[2].eventBoxes[1].lightTranslationBaseDataList"),
                violation<NotNull>("lightTranslationEventBoxGroups[3].eventBoxes"),
                violation<CorrectType>("lightTranslationEventBoxGroups[4]"),
                violation<NotNull>("lightTranslationEventBoxGroups[5]"),

                violation<CorrectType>("vfxEventBoxGroups[0].beat"),
                violation<CorrectType>("vfxEventBoxGroups[0].groupId"),
                violation<CorrectType>("vfxEventBoxGroups[0].type"),
                violation<CorrectType>("vfxEventBoxGroups[0].eventBoxes[0].indexFilter.type"),
                violation<CorrectType>("vfxEventBoxGroups[0].eventBoxes[0].indexFilter.param0"),
                violation<CorrectType>("vfxEventBoxGroups[0].eventBoxes[0].indexFilter.param1"),
                violation<CorrectType>("vfxEventBoxGroups[0].eventBoxes[0].indexFilter.reversed"),
                violation<CorrectType>("vfxEventBoxGroups[0].eventBoxes[0].indexFilter.chunks"),
                violation<CorrectType>("vfxEventBoxGroups[0].eventBoxes[0].indexFilter.randomType"),
                violation<CorrectType>("vfxEventBoxGroups[0].eventBoxes[0].indexFilter.seed"),
                violation<CorrectType>("vfxEventBoxGroups[0].eventBoxes[0].indexFilter.limit"),
                violation<CorrectType>("vfxEventBoxGroups[0].eventBoxes[0].indexFilter.alsoAffectsType"),
                violation<CorrectType>("vfxEventBoxGroups[0].eventBoxes[0].beatDistributionParam"),
                violation<CorrectType>("vfxEventBoxGroups[0].eventBoxes[0].beatDistributionParamType"),
                violation<CorrectType>("vfxEventBoxGroups[0].eventBoxes[0].vfxDistributionParam"),
                violation<CorrectType>("vfxEventBoxGroups[0].eventBoxes[0].vfxDistributionParamType"),
                violation<CorrectType>("vfxEventBoxGroups[0].eventBoxes[0].vfxDistributionEaseType"),
                violation<CorrectType>("vfxEventBoxGroups[0].eventBoxes[0].vfxDistributionShouldAffectFirstBaseEvent"),
                violation<CorrectType>("vfxEventBoxGroups[0].eventBoxes[0].vfxBaseDataList[0]"),
                violation<NotNull>("vfxEventBoxGroups[0].eventBoxes[0].vfxBaseDataList[1]"),
                violation<CorrectType>("vfxEventBoxGroups[0].eventBoxes[1].indexFilter"),
                violation<CorrectType>("vfxEventBoxGroups[0].eventBoxes[1].vfxBaseDataList"),
                violation<NodePresent>("vfxEventBoxGroups[0].eventBoxes[2].indexFilter"),
                violation<CorrectType>("vfxEventBoxGroups[0].eventBoxes[3]"),
                violation<NotNull>("vfxEventBoxGroups[0].eventBoxes[4]"),
                violation<CorrectType>("vfxEventBoxGroups[1].eventBoxes"),
                violation<NotNull>("vfxEventBoxGroups[2].beat"),
                violation<NotNull>("vfxEventBoxGroups[2].groupId"),
                violation<In<Int>>("vfxEventBoxGroups[2].type"),
                violation<NotNull>("vfxEventBoxGroups[2].eventBoxes[0].indexFilter.type"),
                violation<NotNull>("vfxEventBoxGroups[2].eventBoxes[0].indexFilter.param0"),
                violation<NotNull>("vfxEventBoxGroups[2].eventBoxes[0].indexFilter.param1"),
                violation<NotNull>("vfxEventBoxGroups[2].eventBoxes[0].indexFilter.reversed"),
                violation<NotNull>("vfxEventBoxGroups[2].eventBoxes[0].indexFilter.chunks"),
                violation<NotNull>("vfxEventBoxGroups[2].eventBoxes[0].indexFilter.randomType"),
                violation<NotNull>("vfxEventBoxGroups[2].eventBoxes[0].indexFilter.seed"),
                violation<NotNull>("vfxEventBoxGroups[2].eventBoxes[0].indexFilter.limit"),
                violation<NotNull>("vfxEventBoxGroups[2].eventBoxes[0].indexFilter.alsoAffectsType"),
                violation<NotNull>("vfxEventBoxGroups[2].eventBoxes[0].beatDistributionParam"),
                violation<In<Int>>("vfxEventBoxGroups[2].eventBoxes[0].beatDistributionParamType"),
                violation<NotNull>("vfxEventBoxGroups[2].eventBoxes[0].vfxDistributionParam"),
                violation<In<Int>>("vfxEventBoxGroups[2].eventBoxes[0].vfxDistributionParamType"),
                violation<NotNull>("vfxEventBoxGroups[2].eventBoxes[0].vfxDistributionEaseType"),
                violation<NotNull>("vfxEventBoxGroups[2].eventBoxes[0].vfxDistributionShouldAffectFirstBaseEvent"),
                violation<NotNull>("vfxEventBoxGroups[2].eventBoxes[0].vfxBaseDataList"),
                violation<NotNull>("vfxEventBoxGroups[2].eventBoxes[1].indexFilter"),
                violation<NotNull>("vfxEventBoxGroups[3].eventBoxes"),
                violation<CorrectType>("vfxEventBoxGroups[5]"),
                violation<NotNull>("vfxEventBoxGroups[6]"),

                violation<CorrectType>("_fxEventsCollection.intEventsList[0]._time"),
                violation<CorrectType>("_fxEventsCollection.intEventsList[0].usePreviousEventValue"),
                violation<CorrectType>("_fxEventsCollection.intEventsList[0].value"),
                violation<NotNull>("_fxEventsCollection.intEventsList[1]._time"),
                violation<NotNull>("_fxEventsCollection.intEventsList[1].usePreviousEventValue"),
                violation<NotNull>("_fxEventsCollection.intEventsList[1].value"),
                violation<CorrectType>("_fxEventsCollection.intEventsList[3]"),
                violation<NotNull>("_fxEventsCollection.intEventsList[4]"),

                violation<CorrectType>("_fxEventsCollection.floatEventsList[0]._time"),
                violation<CorrectType>("_fxEventsCollection.floatEventsList[0].usePreviousEventValue"),
                violation<CorrectType>("_fxEventsCollection.floatEventsList[0].value"),
                violation<CorrectType>("_fxEventsCollection.floatEventsList[0].easeType"),
                violation<NotNull>("_fxEventsCollection.floatEventsList[1]._time"),
                violation<NotNull>("_fxEventsCollection.floatEventsList[1].usePreviousEventValue"),
                violation<NotNull>("_fxEventsCollection.floatEventsList[1].value"),
                violation<NotNull>("_fxEventsCollection.floatEventsList[1].easeType"),
                violation<CorrectType>("_fxEventsCollection.floatEventsList[3]"),
                violation<NotNull>("_fxEventsCollection.floatEventsList[4]"),

                violation<CorrectType>("useNormalEventsAsCompatibleEvents")
            ),
            ex.constraintViolations
        )
    }
}
